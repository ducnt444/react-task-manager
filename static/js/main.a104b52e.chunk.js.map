{"version":3,"sources":["redux/actions/ActionType.js","redux/actions/ActionCreator.js","views/Home/Task.js","views/Home/Home.js","components/ModalMain.js","views/AddTask.js","assets/react-logo-min.png","components/Loading.js","views/EditTask.js","App.js","reportWebVitals.js","redux/reducers/TaskReducer.js","redux/reducers/ModalReducer.js","redux/reducers/RootReducer.js","redux/reducers/LoadingReducer.js","redux/Store.js","index.js"],"names":["ToggleLoadingType","GetTaskListType","ToggleLoadingAction","status","type","actionTypes","payload","ModalContentAction","createAction","content","ModalVisibleAction","isVisible","ModalLoadingAction","isLoading","AddTaskAction","newTask","EditTaskAction","editedTask","CompleteTaskAction","completeTask","DeleteTaskAction","mode","deleteId","Task","task","toastSuccess","toastWarning","history","useHistory","dispatch","useDispatch","formatter","Intl","DateTimeFormat","timeZone","year","month","day","timeFromServer","taskDate","localTime","format","Date","completeTaskToStore","id","isDone","axios","patch","then","res","data","className","taskName","onClick","push","Home","tasks","doneTasks","filter","todoTasks","document","getElementById","scrollIntoView","behavior","length","to","map","ModalMain","confirmLoading","useSelector","state","modalState","visible","modalContent","taskState","deleteID","onOk","delete","deleteTaskAPI","onCancel","AddTask","toggleLoading","toastError","useState","setTaskName","setTaskDate","updateNewTaskToStore","newTaskData","post","htmlFor","value","onChange","e","target","dateFormat","selected","date","minDate","subDays","Loading","src","logo","alt","EditTask","useParams","useEffect","get","parseISO","editTaskToStore","editedTaskData","App","text","toast","success","error","store","loadingState","taskList","updateTaskListToStore","GetTaskListAction","transition","Flip","position","autoClose","hideProgressBar","newestOnTop","closeOnClick","rtl","pauseOnFocusLoss","draggable","pauseOnHover","path","warn","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","TaskReducer","createReducer","builder","addCase","action","ModalReducer","combineReducers","middleware","thunk","createStore","rootReducer","composeWithDevTools","applyMiddleware","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.a104b52e.chunk.js","sourcesContent":["export const ToggleLoadingType = \"TOGGLE_LOADING\";\r\nexport const GetTaskListType = \"GET_TASK_LIST\";\r\nexport const AddTaskType = \"ADD_TASK\";\r\n\r\n\r\n\r\n\r\nexport const UpdateTaskListType = \"UPDATE_TASK_LIST\";\r\n","import * as actionTypes from \"../actions/ActionType\";\r\nimport { createAction } from \"@reduxjs/toolkit\";\r\n\r\nexport const ToggleLoadingAction = (status) => ({\r\n  type: actionTypes.ToggleLoadingType,\r\n  payload: {\r\n    status,\r\n  },\r\n});\r\n\r\nexport const ModalContentAction = createAction(\r\n  \"MODAL_CONTENT\",\r\n  function prepare(content) {\r\n    return {\r\n      payload: {\r\n        content,\r\n      },\r\n    };\r\n  }\r\n);\r\n\r\nexport const ModalVisibleAction = createAction(\r\n  \"MODAL_VISIBLE\",\r\n  function prepare(isVisible) {\r\n    return {\r\n      payload: {\r\n        isVisible,\r\n      },\r\n    };\r\n  }\r\n);\r\n\r\nexport const ModalLoadingAction = createAction(\r\n  \"MODAL_LOADING\",\r\n  function prepare(isLoading) {\r\n    return {\r\n      payload: {\r\n        isLoading,\r\n      },\r\n    };\r\n  }\r\n);\r\n\r\nexport const GetTaskListAction = (taskList) => ({\r\n  type: actionTypes.GetTaskListType,\r\n  payload: {\r\n    taskList,\r\n  },\r\n});\r\n\r\nexport const AddTaskAction = createAction(\r\n  \"ADD_TASK\",\r\n  function prepare(newTask) {\r\n    return {\r\n      payload: {\r\n        newTask,\r\n      },\r\n    };\r\n  }\r\n);\r\n\r\nexport const EditTaskAction = createAction(\r\n  \"EDIT_TASK\",\r\n  function prepare(editedTask) {\r\n    return {\r\n      payload: {\r\n        editedTask,\r\n      },\r\n    };\r\n  }\r\n);\r\n\r\nexport const CompleteTaskAction = createAction(\r\n  \"COMPLETE_TASK\",\r\n  function prepare(completeTask) {\r\n    return {\r\n      payload: {\r\n        completeTask,\r\n      },\r\n    };\r\n  }\r\n);\r\n\r\nexport const DeleteTaskAction = createAction(\r\n  \"DELETE _TASK\",\r\n  function prepare(mode, deleteId) {\r\n    return {\r\n      payload: { mode, deleteId },\r\n    };\r\n  }\r\n);\r\n","import React from \"react\";\r\nimport { BiEditAlt } from \"react-icons/bi\";\r\nimport { RiDeleteBinLine } from \"react-icons/ri\";\r\nimport { MdDone } from \"react-icons/md\";\r\nimport { FaRedo } from \"react-icons/fa\";\r\nimport { useHistory } from \"react-router-dom\";\r\nimport {\r\n  ModalContentAction,\r\n  ModalVisibleAction,\r\n  DeleteTaskAction,\r\n  CompleteTaskAction,\r\n  ToggleLoadingAction,\r\n} from \"../../redux/actions/ActionCreator\";\r\nimport { useDispatch } from \"react-redux\";\r\nimport axios from \"axios\";\r\n\r\nconst Task = ({ task, toastSuccess, toastWarning }) => {\r\n  const history = useHistory();\r\n  const dispatch = useDispatch();\r\n\r\n  //timezone\r\n  var options = {\r\n    timeZone: \"Asia/Ho_Chi_Minh\",\r\n    year: \"numeric\",\r\n    month: \"2-digit\",\r\n    day: \"2-digit\",\r\n  };\r\n  var formatter = new Intl.DateTimeFormat([], options);\r\n  var timeFromServer = task.taskDate;\r\n  var localTime = formatter.format(new Date(timeFromServer));\r\n\r\n  //complete task thunk\r\n  const completeTaskAPI = (id, isDone) => {\r\n    return axios.patch(`https://test-heroku444.herokuapp.com/tasks/${id}`, {\r\n      isDone: !isDone,\r\n    });\r\n  };\r\n  const completeTaskToStore = () => {\r\n    dispatch(ToggleLoadingAction(true));\r\n    return function (dispatch) {\r\n      return completeTaskAPI(task.id, task.isDone).then((res) => {\r\n        dispatch(CompleteTaskAction(res.data));\r\n        dispatch(ToggleLoadingAction(false));\r\n        res.data.isDone\r\n          ? toastSuccess(\"Task is completed\")\r\n          : toastWarning(\"Task is uncompleted\");\r\n      });\r\n    };\r\n  };\r\n  const handleComplete = () => dispatch(completeTaskToStore());\r\n\r\n  //Trigger modal delete\r\n  const TriggerModalDelete = () => {\r\n    dispatch(DeleteTaskAction(\"attemptDelete\", task.id));\r\n    dispatch(ModalContentAction(\"Do you want to delete this task\"));\r\n    dispatch(ModalVisibleAction(true));\r\n  };\r\n\r\n  return (\r\n    <div className=\"taskItem\">\r\n      <div className=\"taskContent\">\r\n        <h3 className=\"taskName\">{task.taskName}</h3>\r\n        <h4 className=\"taskDate\">{localTime}</h4>\r\n      </div>\r\n      <button className=\"doneBtn\" onClick={handleComplete}>\r\n        {task.isDone ? <FaRedo /> : <MdDone />}\r\n      </button>\r\n\r\n      <button\r\n        className=\"editBtn\"\r\n        onClick={() => history.push(`/edit-task/${task.id}`)}\r\n      >\r\n        <BiEditAlt />\r\n      </button>\r\n      <button className=\"deleteBtn\" onClick={TriggerModalDelete}>\r\n        <RiDeleteBinLine />\r\n      </button>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Task;\r\n","import Task from \"./Task\";\r\nimport { AiOutlinePlusCircle } from \"react-icons/ai\";\r\nimport { Link } from \"react-router-dom\";\r\n\r\nconst Home = ({ tasks, toastSuccess, toastWarning }) => {\r\n  const doneTasks = tasks.filter((task) => task.isDone === true);\r\n  const todoTasks = tasks.filter((task) => task.isDone === false);\r\n\r\n  const scrollToDone = () =>\r\n    document.getElementById(\"doneTasks\").scrollIntoView({ behavior: \"smooth\" });\r\n  const scrollToTodo = () =>\r\n    document.getElementById(\"todoTasks\").scrollIntoView({ behavior: \"smooth\" });\r\n\r\n  return (\r\n    <>\r\n      <header>\r\n        <h1>Task Manager by React</h1>\r\n        <div className=\"header-content\">\r\n          <div className=\"statistics-area\">\r\n            <div className=\"statistics\" onClick={scrollToDone}>\r\n              <div className=\"header-item\">{doneTasks.length}</div>\r\n              <span className=\"statistics-text\">Completed</span>\r\n            </div>\r\n            <div className=\"statistics\" onClick={scrollToTodo}>\r\n              <div className=\"header-item\">{todoTasks.length}</div>\r\n              <span className=\"statistics-text\">Ongoing</span>\r\n            </div>\r\n          </div>\r\n          <button className=\"header-item header-btn\">\r\n            <Link to=\"/add-task\">\r\n              <span>Add</span> <AiOutlinePlusCircle />\r\n            </Link>\r\n          </button>\r\n        </div>\r\n      </header>\r\n\r\n      <main>\r\n        <div className=\"home\">\r\n          <div id=\"todoTasks\">\r\n            <h2>Ongoing tasks: </h2>\r\n            {todoTasks.map((task) => (\r\n              <Task\r\n                key={task.id}\r\n                task={task}\r\n                toastSuccess={toastSuccess}\r\n                toastWarning={toastWarning}\r\n              />\r\n            ))}\r\n          </div>\r\n          <div id=\"doneTasks\">\r\n            <h2>Completed tasks: </h2>\r\n            {doneTasks.map((task) => (\r\n              <Task\r\n                key={task.id}\r\n                task={task}\r\n                toastSuccess={toastSuccess}\r\n                toastWarning={toastWarning}\r\n              />\r\n            ))}\r\n          </div>\r\n        </div>\r\n      </main>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default Home;\r\n","import React from \"react\";\r\nimport { Modal } from \"antd\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport {\r\n  ModalVisibleAction,\r\n  ModalLoadingAction,\r\n  DeleteTaskAction,\r\n} from \"../redux/actions/ActionCreator\";\r\nimport axios from \"axios\";\r\n\r\nconst ModalMain = () => {\r\n  const dispatch = useDispatch();\r\n\r\n  const confirmLoading = useSelector((state) => state.modalState.isLoading);\r\n  const visible = useSelector((state) => state.modalState.isVisible);\r\n  const modalContent = useSelector((state) => state.modalState.modalContent);\r\n  const deleteId = useSelector((state) => state.taskState.deleteID);\r\n\r\n  const handleCancel = () => {\r\n    dispatch(ModalVisibleAction(false));\r\n  };\r\n\r\n  //thunk\r\n  const handleOk = () => {\r\n    dispatch(updateTaskListToStore());\r\n  };\r\n  function deleteTaskAPI(deleteId) {\r\n    return axios.delete(\r\n      `https://test-heroku444.herokuapp.com/tasks/${deleteId}`\r\n    );\r\n  }\r\n  function updateTaskListToStore() {\r\n    return function (dispatch) {\r\n      return deleteTaskAPI(deleteId).then(() => {\r\n        dispatch(DeleteTaskAction(\"confirmDelete\", deleteId));\r\n        dispatch(ModalLoadingAction(true));\r\n        dispatch(ModalVisibleAction(false));\r\n      });\r\n    };\r\n  }\r\n  \r\n  return (\r\n    <Modal\r\n      // title=\"Confirmation\"\r\n      visible={visible}\r\n      confirmLoading={confirmLoading}\r\n      onOk={handleOk}\r\n      onCancel={handleCancel}\r\n    >\r\n      <p className=\"modalContent\">{modalContent}</p>\r\n    </Modal>\r\n  );\r\n};\r\n\r\nexport default ModalMain;\r\n","import axios from \"axios\";\r\nimport React, { useState } from \"react\";\r\nimport { Link, useHistory } from \"react-router-dom\";\r\nimport { useDispatch } from \"react-redux\";\r\nimport DatePicker from \"react-datepicker\";\r\nimport \"react-datepicker/dist/react-datepicker.css\";\r\nimport { subDays } from \"date-fns\";\r\nimport { AddTaskAction } from \"../redux/actions/ActionCreator\";\r\n// import { registerLocale, setDefaultLocale } from \"react-datepicker\";\r\n// import vi from \"date-fns/locale/vi\";\r\n// registerLocale(\"vi\", vi);\r\n\r\nconst AddTask = ({ toggleLoading, toastSuccess, toastError }) => {\r\n  const dispatch = useDispatch();\r\n  const history = useHistory();\r\n\r\n  const [taskName, setTaskName] = useState(\"\");\r\n  const [taskDate, setTaskDate] = useState(null);\r\n\r\n  const handleNameChange = (e) => {\r\n    setTaskName(e.target.value);\r\n  };\r\n\r\n  const handleDateChange = (date) => {\r\n    setTaskDate(date);\r\n  };\r\n\r\n  //thunk\r\n  function addTaskAPI(newTask) {\r\n    return axios.post(\"https://test-heroku444.herokuapp.com/tasks\", newTask);\r\n  }\r\n\r\n  function updateNewTaskToStore() {\r\n    toggleLoading(true);\r\n    const newTaskData = { taskName, taskDate, isDone: false };\r\n    return function (dispatch) {\r\n      return addTaskAPI(newTaskData).then((res) => {\r\n        dispatch(AddTaskAction(res.data));\r\n        setTaskName(\"\");\r\n        setTaskDate(\"\");\r\n        toggleLoading(false);\r\n        toastSuccess(\"Task added successfully\");\r\n      });\r\n    };\r\n  }\r\n\r\n  const handleSubmit = () => {\r\n    if (taskName !== \"\" && taskDate !== null) dispatch(updateNewTaskToStore());\r\n    else toastError(\"Please fill in both fields\");\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <header>\r\n        <h1>Add task</h1>\r\n        <div className=\"header-content\">\r\n          <button className=\"header-item header-btn\">\r\n            <Link to=\"/\">\r\n              <span>Back</span>\r\n            </Link>\r\n          </button>\r\n        </div>\r\n      </header>\r\n\r\n      <main>\r\n        <div className=\"form-item\">\r\n          <label htmlFor=\"taskName\">Add task:</label>\r\n          <input\r\n            type=\"text\"\r\n            id=\"taskName\"\r\n            value={taskName}\r\n            onChange={handleNameChange}\r\n          ></input>\r\n        </div>\r\n        <div className=\"form-item\">\r\n          <label htmlFor=\"taskDate\">Task date:</label>\r\n          <DatePicker\r\n            dateFormat=\"dd/MM/yyyy\"\r\n            selected={taskDate}\r\n            onChange={handleDateChange}\r\n            minDate={subDays(new Date(), 0)}\r\n          />\r\n        </div>\r\n        <button\r\n          onClick={handleSubmit}\r\n          className=\"confirm-btn blue-text-btn btn\"\r\n        >\r\n          Confirm\r\n        </button>\r\n      </main>\r\n    </>\r\n  );\r\n\r\n  //legacy (non-redux):\r\n  // const handleSubmitOld = () => {\r\n  //   if (taskName && taskDate) {\r\n  //     const newTask = { taskName, taskDate, isDone: false };\r\n  //     toggleLoading(true);\r\n  //     axios\r\n  //       .post(\"https://test-heroku444.herokuapp.com/tasks\", newTask)\r\n  //       .then((res) => {\r\n  //         setTaskName(\"\");\r\n  //         setTaskDate(\"\");\r\n  //         toggleLoading(false);\r\n  //         history.push(\"/\");\r\n  //       });\r\n  //   } else {\r\n  //     console.log(\"empty\");\r\n  //   }\r\n  // };\r\n};\r\n\r\nexport default AddTask;\r\n","export default __webpack_public_path__ + \"static/media/react-logo-min.90175bd1.png\";","import React from \"react\";\r\nimport logo from \"../assets/react-logo-min.png\";\r\n\r\nconst Loading = ({ isLoading }) => {\r\n  return (\r\n    <div className={`loading ${isLoading ? \"show\" : \"\"}`}>\r\n      <img src={logo} alt=\"loading\"></img>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Loading;\r\n","import axios from \"axios\";\r\nimport React, { useEffect, useState } from \"react\";\r\nimport { Link, useHistory, useParams } from \"react-router-dom\";\r\nimport { useDispatch } from \"react-redux\";\r\nimport DatePicker from \"react-datepicker\";\r\nimport \"react-datepicker/dist/react-datepicker.css\";\r\nimport { subDays, parseISO } from \"date-fns\";\r\nimport { EditTaskAction } from \"../redux/actions/ActionCreator\";\r\n// import { registerLocale, setDefaultLocale } from \"react-datepicker\";\r\n// import vi from \"date-fns/locale/vi\";\r\n// registerLocale(\"vi\", vi);\r\n\r\nconst EditTask = ({ toggleLoading, toastSuccess, toastError }) => {\r\n  const dispatch = useDispatch();\r\n  const { id } = useParams();\r\n  const history = useHistory();\r\n\r\n  const [taskName, setTaskName] = useState(\"\");\r\n  const [taskDate, setTaskDate] = useState(null);\r\n  // const [taskIsDone, setTaskIsDone] = useState(false);\r\n\r\n  useEffect(() => {\r\n    toggleLoading(true);\r\n    axios\r\n      .get(`https://test-heroku444.herokuapp.com/tasks/${id}`)\r\n      .then((res) => {\r\n        setTaskName(res.data.taskName);\r\n        setTaskDate(parseISO(res.data.taskDate));\r\n        // setTaskIsDone(res.data.isDone);\r\n        toggleLoading(false);\r\n      });\r\n  }, []);\r\n\r\n  const handleNameChange = (e) => {\r\n    setTaskName(e.target.value);\r\n  };\r\n\r\n  const handleDateChange = (date) => {\r\n    setTaskDate(date);\r\n  };\r\n\r\n  //thunk\r\n  function editTaskAPI(editedTask) {\r\n    return axios.patch(\r\n      `https://test-heroku444.herokuapp.com/tasks/${id}`,\r\n      editedTask\r\n    );\r\n  }\r\n\r\n  function editTaskToStore() {\r\n    toggleLoading(true);\r\n    const editedTaskData = { taskName, taskDate };\r\n    return function (dispatch) {\r\n      return editTaskAPI(editedTaskData).then((res) => {\r\n        dispatch(EditTaskAction(res.data));\r\n        toggleLoading(false);\r\n        toastSuccess(\"Task edited successfully\");\r\n      });\r\n    };\r\n  }\r\n\r\n  const handleSubmit = () => {\r\n    if (taskName !== \"\" && taskDate !== null) dispatch(editTaskToStore());\r\n    else toastError(\"Please fill in both fields\");\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <header>\r\n        <h1>Edit task</h1>\r\n        <div className=\"header-content\">\r\n          <button className=\"header-item header-btn\">\r\n            <Link to=\"/\">\r\n              <span>Back</span>\r\n            </Link>\r\n          </button>\r\n        </div>\r\n      </header>\r\n\r\n      <main>\r\n        <div className=\"form-item\">\r\n          <label htmlFor=\"taskName\">Edit task:</label>\r\n          <input\r\n            type=\"text\"\r\n            id=\"taskName\"\r\n            value={taskName}\r\n            onChange={handleNameChange}\r\n          ></input>\r\n        </div>\r\n        <div className=\"form-item\">\r\n          <label htmlFor=\"taskDate\">Task date:</label>\r\n          <DatePicker\r\n            dateFormat=\"dd/MM/yyyy\"\r\n            selected={taskDate}\r\n            onChange={handleDateChange}\r\n            minDate={subDays(new Date(), 0)}\r\n          />\r\n        </div>\r\n        <button\r\n          onClick={handleSubmit}\r\n          className=\"confirm-btn blue-text-btn btn\"\r\n        >\r\n          Confirm\r\n        </button>\r\n      </main>\r\n    </>\r\n  );\r\n};\r\n\r\n//legacy: non-redux\r\n\r\n// const handleSubmit = () => {\r\n//   if (taskName && taskDate) {\r\n//     const editedTask = { taskName, taskDate };\r\n//     toggleLoading(true);\r\n//     axios\r\n//       .patch(`https://test-heroku444.herokuapp.com/tasks/${id}`, editedTask)\r\n//       .then((res) => {\r\n//         console.log(res);\r\n//         setTaskName(\"\");\r\n//         setTaskDate(\"\");\r\n//         reRender();\r\n//         toggleLoading(false);\r\n//         history.push(\"/\");\r\n//       });\r\n//   } else {\r\n//     console.log(\"empty\");\r\n//   }\r\n// };\r\n\r\nexport default EditTask;\r\n","import \"./App.css\";\nimport Home from \"./views/Home/Home\";\nimport axios from \"axios\";\nimport { useEffect } from \"react\";\nimport { Route, Switch } from \"react-router-dom\";\nimport ModalMain from \"./components/ModalMain\";\nimport AddTask from \"./views/AddTask\";\nimport Loading from \"./components/Loading\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport EditTask from \"./views/EditTask\";\nimport {\n  ToggleLoadingAction,\n  GetTaskListAction,\n} from \"./redux/actions/ActionCreator\";\nimport { ToastContainer, toast, Flip } from \"react-toastify\";\nimport \"react-toastify/dist/ReactToastify.css\";\n\nfunction App() {\n  //toast\n  const toastSuccess = (text) => toast.success(text);\n  const toastError = (text) => toast.error(text);\n  const toastWarning = (text) => toast.warn(text);\n\n  //general\n  const dispatch = useDispatch();\n\n  //toggleLoading\n  const isLoading = useSelector((store) => store.loadingState.isLoading);\n  const toggleLoading = (mode) => {\n    dispatch(ToggleLoadingAction(mode));\n  };\n\n  //thunk: get task list then update redux\n  //to call this thunk: dispatch(updateTaskListToStore());\n  const taskList = useSelector((store) => store.taskState.taskList);\n  function getTaskList() {\n    return axios.get(\"https://test-heroku444.herokuapp.com/tasks\");\n  }\n  function updateTaskListToStore() {\n    return function (dispatch) {\n      return getTaskList().then((res) => dispatch(GetTaskListAction(res.data)));\n    };\n  }\n\n  //first load: thunk call. After: re-render\n  useEffect(() => {\n    toggleLoading(true);\n    dispatch(updateTaskListToStore());\n    toggleLoading(false);\n  }, []);\n\n  return (\n    <div className=\"App\">\n      <Loading isLoading={isLoading} />\n      <ToastContainer\n        transition={Flip}\n        className=\"customizedToast\"\n        position=\"bottom-right\"\n        autoClose={1500}\n        hideProgressBar={false}\n        newestOnTop\n        closeOnClick={false}\n        rtl={false}\n        pauseOnFocusLoss={false}\n        draggable={false}\n        pauseOnHover={false}\n      />\n      <ModalMain />\n      <Switch>\n        <Route path=\"/add-task\">\n          <AddTask\n            toggleLoading={toggleLoading}\n            toastSuccess={toastSuccess}\n            toastError={toastError}\n          />\n        </Route>\n        <Route path=\"/edit-task/:id\">\n          <EditTask\n            toggleLoading={toggleLoading}\n            toastSuccess={toastSuccess}\n            toastError={toastError}\n          />\n        </Route>\n        <Route path=\"/\">\n          <Home\n            tasks={taskList}\n            toastSuccess={toastSuccess}\n            toastWarning={toastWarning}\n          />\n        </Route>\n      </Switch>\n    </div>\n  );\n}\n\n//legacy\n\n//Component state style\n// const [tasks, setTasks] = useState([]);\n// useEffect(() => {\n//   axios.get(\"https://test-heroku444.herokuapp.com/tasks\").then((res) => {\n//     setTasks(res.data);\n//     toggleLoading(false);\n//   });\n// }, [toggleFetching]);\n\n//Modal\n// modalContent = { modalContent };\n// visible = { visible };\n// confirmLoading = { confirmLoading };\n// confirmDelete = { confirmDelete };\n// handleCancel = { confirmCancel };\n// const confirmLoading = useSelector((state) => state.modalState.isLoading);\n// const visible = useSelector((state) => state.modalState.isVisible);\n// const modalContent = useSelector((state) => state.modalState.modalContent);\n\n// //delete task\n// const [deleteID, setDeleteID] = useState(\"\");\n// const handleDelete = (id) => {\n//   setModalContent(\"Do you want to delete this task?\");\n//   setVisible(true);\n//   setDeleteID(id);\n// };\n// const confirmCancel = () => {\n//   setVisible(false);\n// };\n// const confirmDelete = () => {\n//   setConfirmLoading(true);\n//   axios\n//     .delete(`https://test-heroku444.herokuapp.com/tasks/${deleteID}`)\n//     .then(() => {\n//       // setTasks(tasks.filter((task) => task.id !== deleteID));\n//       setConfirmLoading(false);\n//       setVisible(false);\n//     });\n// };\n\n//complete task\n// const handleComplete = (isDone, id) => {\n//   toggleLoading(true);\n//   axios\n//     .patch(`https://test-heroku444.herokuapp.com/tasks/${id}`, {\n//       isDone: !isDone,\n//     })\n//     .then(() => {\n//       setToggleFetching((toggleFetching) => toggleFetching + 1);\n//       toggleLoading(false);\n//     });\n// };\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import { GetTaskListType, AddTaskType } from \"../actions/ActionType\";\r\nimport { createReducer } from \"@reduxjs/toolkit\";\r\nimport {\r\n  EditTaskAction,\r\n  DeleteTaskAction,\r\n  CompleteTaskAction,\r\n} from \"../actions/ActionCreator\";\r\n\r\nexport const TaskReducer = createReducer(\r\n  { taskList: [], deleteID: null },\r\n  (builder) => {\r\n    builder\r\n      .addCase(GetTaskListType, (state, action) => {\r\n        state.taskList = action.payload.taskList;\r\n      })\r\n      .addCase(AddTaskType, (state, action) => {\r\n        state.taskList.push(action.payload.newTask);\r\n      })\r\n      .addCase(EditTaskAction, (state, action) => {\r\n        state.taskList = state.taskList.map((task) =>\r\n          task.id === action.payload.editedTask.id\r\n            ? {\r\n                ...task,\r\n                taskName: action.payload.editedTask.taskName,\r\n                taskDate: action.payload.editedTask.taskDate,\r\n                isDone: action.payload.editedTask.isDone,\r\n              }\r\n            : task\r\n        );\r\n      })\r\n      .addCase(CompleteTaskAction, (state, action) => {\r\n        state.taskList = state.taskList.map((task) =>\r\n          task.id === action.payload.completeTask.id\r\n            ? {\r\n                ...task,\r\n                isDone: action.payload.completeTask.isDone,\r\n              }\r\n            : task\r\n        );\r\n      })\r\n      .addCase(DeleteTaskAction, (state, action) => {\r\n        if (action.payload.mode === \"attemptDelete\") {\r\n          state.deleteID = action.payload.deleteId;\r\n        } else if (action.payload.mode === \"confirmDelete\") {\r\n          state.taskList = state.taskList.filter(\r\n            (task) => task.id !== state.deleteID\r\n          );\r\n        }\r\n      });\r\n  }\r\n);\r\n\r\n//legacy: old style\r\n// export const TaskReducer = (\r\n// state = {\r\n//   taskList: [],\r\n// },\r\n//   action\r\n// ) => {\r\n//   switch (action.type) {\r\n//     case GetTaskListType: {\r\n//       return { ...state, taskList: action.payload.taskList };\r\n//     }\r\n//     default:\r\n//       return state;\r\n//   }\r\n// };\r\n","import { createReducer } from \"@reduxjs/toolkit\";\r\nimport {\r\n  ModalContentAction,\r\n  ModalVisibleAction,\r\n  ModalLoadingAction,\r\n} from \"../actions/ActionCreator\";\r\n\r\nexport const ModalReducer = createReducer(\r\n  { modalContent: \"\", isVisible: false, isLoading: false },\r\n  (builder) => {\r\n    builder\r\n      .addCase(ModalContentAction, (state, action) => {\r\n        state.modalContent = action.payload.content;\r\n      })\r\n      .addCase(ModalVisibleAction, (state, action) => {\r\n        state.isVisible = action.payload.isVisible;\r\n      })\r\n      .addCase(ModalLoadingAction, (state, action) => {\r\n        state.isLoading = action.payload.isLoading;\r\n      });\r\n  }\r\n);\r\n","import { combineReducers } from \"redux\";\r\nimport { LoadingReducer } from \"./LoadingReducer\";\r\nimport { TaskReducer } from \"./TaskReducer\";\r\nimport { ModalReducer } from \"./ModalReducer\";\r\n\r\nexport default combineReducers({\r\n  loadingState: LoadingReducer,\r\n  taskState: TaskReducer,\r\n  modalState: ModalReducer,\r\n});\r\n","import { ToggleLoadingType } from \"../actions/ActionType\";\r\n\r\nexport const LoadingReducer = (\r\n  state = {\r\n    isLoading: true,\r\n  },\r\n  action\r\n) => {\r\n  switch (action.type) {\r\n    case ToggleLoadingType: {\r\n      return { ...state, isLoading: action.payload.status };\r\n    }\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n","import rootReducer from \"./reducers/RootReducer\";\r\nimport { createStore, applyMiddleware } from \"redux\";\r\nimport { composeWithDevTools } from \"redux-devtools-extension\";\r\nimport thunk from \"redux-thunk\";\r\n\r\nconst middleware = [thunk];\r\n\r\nconst store = createStore(\r\n  rootReducer,\r\n  composeWithDevTools(\r\n    applyMiddleware(...middleware)\r\n  )\r\n);\r\n\r\nexport default store;\r\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { Provider } from \"react-redux\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\nimport { HashRouter } from \"react-router-dom\";\nimport store from \"./redux/Store\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <HashRouter>\n      <Provider store={store}>\n        <App />\n      </Provider>\n    </HashRouter>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}