{"version":3,"sources":["redux/actions/ActionType.js","redux/actions/ActionCreator.js","services/API_URL.js","services/TaskServices.js","views/Home/Task.js","views/Home/Home.js","components/ModalMain.js","views/AddTask.js","assets/react-logo-min.png","components/Loading.js","views/EditTask.js","services/UserServices.js","views/LoginPage.js","components/TheNavigation.js","views/Profile.js","App.js","reportWebVitals.js","redux/reducers/TaskReducer.js","redux/reducers/ModalReducer.js","redux/reducers/UserReducer.js","redux/reducers/NavigationReducer.js","redux/reducers/RootReducer.js","redux/reducers/LoadingReducer.js","redux/Store.js","index.js"],"names":["ToggleLoadingType","GetTaskListType","ToggleLoadingAction","status","type","actionTypes","payload","UpdateCurrentUserAction","createAction","userInput","DisplayNavAction","displayNav","LogoutAction","ModalContentAction","id","content","ModalVisibleAction","isVisible","ModalLoadingAction","isLoading","AddTaskAction","newTask","EditTaskAction","editedTask","CompleteTaskAction","completeTask","DeleteTaskAction","tasks","GetTaskListAction2","api","updateAllTasks","newTasks","headers","axios","patch","Task","task","toastSuccess","toastWarning","history","useHistory","dispatch","useDispatch","currentUser","useSelector","store","appState","formatter","Intl","DateTimeFormat","timeZone","year","month","day","timeFromServer","taskDate","localTime","format","Date","className","taskName","onClick","completeChangedTask","isDone","map","eachTask","Authorization","token","then","push","Home","doneTasks","filter","todoTasks","document","getElementById","scrollIntoView","behavior","length","ModalMain","modalId","state","modalState","modalContent","confirmLoading","visible","onOk","res","data","onCancel","AddTask","toastError","useState","setTaskName","setTaskDate","to","htmlFor","value","onChange","e","target","dateFormat","selected","date","minDate","subDays","uuidv4","toISOString","console","log","Loading","src","logo","alt","EditTask","useParams","taskIsDone","setTaskIsDone","useEffect","currentTask","find","parseISO","UpdateCurrentUserAPI","put","LoginPage","initDispatch","apiUrl","mode","setMode","username","setUsername","password","setPassword","isClose","setIsClose","LogSignThunk","endpoint","post","LogSignAPI","onClose","catch","error","response","message","finally","handleLogSign","placeholder","href","rel","TheNavigation","exact","activeClassName","Profile","a","App","text","callback","toast","success","loadingState","getCurrent","get","GetUserByIdAPI","res2","err","transition","Flip","position","autoClose","hideProgressBar","newestOnTop","closeOnClick","rtl","pauseOnFocusLoss","draggable","pauseOnHover","path","warn","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","TaskReducer","createReducer","taskList","deleteID","builder","addCase","action","deleteId","ModalReducer","UserReducer","NavigationReducer","combineReducers","taskState","navState","middleware","thunk","createStore","rootReducer","composeWithDevTools","applyMiddleware","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.4e110ac6.chunk.js","sourcesContent":["export const ToggleLoadingType = \"TOGGLE_LOADING\";\r\nexport const GetTaskListType = \"GET_TASK_LIST\";\r\nexport const AddTaskType = \"ADD_TASK\";\r\n\r\n\r\n\r\n\r\nexport const UpdateTaskListType = \"UPDATE_TASK_LIST\";\r\n","import * as actionTypes from \"../actions/ActionType\";\r\nimport { createAction } from \"@reduxjs/toolkit\";\r\n\r\nexport const ToggleLoadingAction = (status) => ({\r\n  type: actionTypes.ToggleLoadingType,\r\n  payload: {\r\n    status,\r\n  },\r\n});\r\n\r\nexport const UpdateCurrentUserAction = createAction(\r\n  \"UPDATE_CURRENT\",\r\n  function prepare(userInput) {\r\n    return {\r\n      payload: {\r\n        userInput,\r\n      },\r\n    };\r\n  }\r\n);\r\n\r\nexport const DisplayNavAction = createAction(\r\n  \"DISPLAY_NAV\",\r\n  function prepare(displayNav) {\r\n    return {\r\n      payload: displayNav,\r\n    };\r\n  }\r\n);\r\n\r\nexport const LogoutAction = createAction(\"LOGOUT\");\r\n\r\nexport const ModalContentAction = createAction(\r\n  \"MODAL_CONTENT\",\r\n  function prepare(id, content) {\r\n    return {\r\n      payload: { id, content },\r\n    };\r\n  }\r\n);\r\n\r\nexport const ModalVisibleAction = createAction(\r\n  \"MODAL_VISIBLE\",\r\n  function prepare(isVisible) {\r\n    return {\r\n      payload: {\r\n        isVisible,\r\n      },\r\n    };\r\n  }\r\n);\r\n\r\nexport const ModalLoadingAction = createAction(\r\n  \"MODAL_LOADING\",\r\n  function prepare(isLoading) {\r\n    return {\r\n      payload: {\r\n        isLoading,\r\n      },\r\n    };\r\n  }\r\n);\r\n\r\nexport const GetTaskListAction = (taskList) => ({\r\n  type: actionTypes.GetTaskListType,\r\n  payload: {\r\n    taskList,\r\n  },\r\n});\r\n\r\nexport const AddTaskAction = createAction(\r\n  \"ADD_TASK\",\r\n  function prepare(newTask) {\r\n    return {\r\n      payload: {\r\n        newTask,\r\n      },\r\n    };\r\n  }\r\n);\r\n\r\nexport const EditTaskAction = createAction(\r\n  \"EDIT_TASK\",\r\n  function prepare(id, editedTask) {\r\n    return {\r\n      payload: {\r\n        id,\r\n        editedTask,\r\n      },\r\n    };\r\n  }\r\n);\r\n\r\nexport const CompleteTaskAction = createAction(\r\n  \"COMPLETE_TASK\",\r\n  function prepare(completeTask) {\r\n    return {\r\n      payload: {\r\n        completeTask,\r\n      },\r\n    };\r\n  }\r\n);\r\n\r\nexport const DeleteTaskAction = createAction(\r\n  \"DELETE _TASK\",\r\n  function prepare(tasks) {\r\n    return {\r\n      payload: tasks,\r\n    };\r\n  }\r\n);\r\n\r\nexport const GetTaskListAction2 = createAction(\r\n  \"GET _TASKS\",\r\n  function prepare(tasks) {\r\n    return {\r\n      payload: tasks,\r\n    };\r\n  }\r\n);\r\n","export const api = \"https://rest-api-v2.herokuapp.com\";\r\n","import axios from \"axios\";\r\nimport { api } from \"./API_URL\";\r\n\r\n//PUT request to /task/taskId, payload = isDone to complete a task\r\nexport const CompleteTaskAPI = (id, isDone) => {\r\n  console.log(id, isDone);\r\n  return axios.patch(api + \"/tasks/\" + id, { isDone: !isDone });\r\n};\r\n\r\n//PATCH to /users/id => tasks (add task, edit task, delete task with a whole new tasks array)\r\nexport const updateAllTasks = (id, newTasks, headers) => {\r\n  return axios.patch(api + \"/users/\" + id, { tasks: newTasks }, headers);\r\n};\r\n","import React from \"react\";\r\nimport { BiEditAlt } from \"react-icons/bi\";\r\nimport { RiDeleteBinLine } from \"react-icons/ri\";\r\nimport { MdDone } from \"react-icons/md\";\r\nimport { FaRedo } from \"react-icons/fa\";\r\nimport { useHistory } from \"react-router-dom\";\r\nimport {\r\n  ModalContentAction,\r\n  ModalVisibleAction,\r\n  ToggleLoadingAction,\r\n  EditTaskAction,\r\n} from \"../../redux/actions/ActionCreator\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { updateAllTasks } from \"../../services/TaskServices\";\r\n\r\nconst Task = ({ task, toastSuccess, toastWarning }) => {\r\n  const history = useHistory();\r\n  const dispatch = useDispatch();\r\n  const currentUser = useSelector((store) => store.appState.currentUser);\r\n\r\n  //timezone\r\n  var options = {\r\n    timeZone: \"Asia/Ho_Chi_Minh\",\r\n    year: \"numeric\",\r\n    month: \"2-digit\",\r\n    day: \"2-digit\",\r\n  };\r\n  var formatter = new Intl.DateTimeFormat([], options);\r\n  var timeFromServer = task.taskDate;\r\n  var localTime = formatter.format(new Date(timeFromServer));\r\n\r\n  const completeTaskThunk = () => {\r\n    return function (dispatch) {\r\n      dispatch(ToggleLoadingAction(true));\r\n      const completeChangedTask = {\r\n        ...task,\r\n        isDone: !task.isDone,\r\n      };\r\n      const newTasks = currentUser.tasks.map((eachTask) => {\r\n        return eachTask.id == task.id ? completeChangedTask : eachTask;\r\n      });\r\n      const headers = {\r\n        Authorization: `Bearer ${currentUser.token}`,\r\n      };\r\n      updateAllTasks(currentUser.id, newTasks, { headers }).then(() => {\r\n        dispatch(EditTaskAction(task.id, completeChangedTask));\r\n        dispatch(ToggleLoadingAction(false));\r\n        task.isDone\r\n          ? toastWarning(\"Task is incomplete\")\r\n          : toastSuccess(\"Task is completed\");\r\n      });\r\n    };\r\n  };\r\n\r\n  const handleComplete = () => dispatch(completeTaskThunk());\r\n\r\n  //Trigger modal delete\r\n  const TriggerModalDelete = () => {\r\n    // dispatch(DeleteTaskAction(\"attemptDelete\", task.id));\r\n    dispatch(ModalContentAction(task.id, \"Do you want to delete this task\"));\r\n    dispatch(ModalVisibleAction(true));\r\n  };\r\n\r\n  return (\r\n    <div className=\"taskItem\">\r\n      <div className=\"taskContent\">\r\n        <h3 className=\"taskName\">{task.taskName}</h3>\r\n        <h4 className=\"taskDate\">{localTime}</h4>\r\n      </div>\r\n      <button className=\"doneBtn\" onClick={handleComplete}>\r\n        {task.isDone ? <FaRedo /> : <MdDone />}\r\n      </button>\r\n\r\n      <button\r\n        className=\"editBtn\"\r\n        onClick={() => history.push(`/edit-task/${task.id}`)}\r\n      >\r\n        <BiEditAlt />\r\n      </button>\r\n      <button className=\"deleteBtn\" onClick={TriggerModalDelete}>\r\n        <RiDeleteBinLine />\r\n      </button>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Task;\r\n","import Task from \"./Task\";\r\nimport { useSelector } from \"react-redux\";\r\nimport { AiOutlinePlusCircle } from \"react-icons/ai\";\r\nimport { Link } from \"react-router-dom\";\r\n\r\nconst Home = ({ toastSuccess, toastWarning }) => {\r\n  const tasks = useSelector((store) => store.appState.currentUser.tasks);\r\n  const doneTasks = tasks.filter((task) => task.isDone === true);\r\n  const todoTasks = tasks.filter((task) => task.isDone === false);\r\n  const scrollToDone = () =>\r\n    document.getElementById(\"doneTasks\").scrollIntoView({ behavior: \"smooth\" });\r\n  const scrollToTodo = () =>\r\n    document.getElementById(\"todoTasks\").scrollIntoView({ behavior: \"smooth\" });\r\n\r\n  return (\r\n    <>\r\n      <header className=\"container1140\">\r\n        <h1>Task Manager by React</h1>\r\n        <div className=\"header-content\">\r\n          <div className=\"statistics-area\">\r\n            <div className=\"statistics\" onClick={scrollToDone}>\r\n              <div className=\"header-item\">{doneTasks.length}</div>\r\n              <span className=\"statistics-text\">Completed</span>\r\n            </div>\r\n            <div className=\"statistics\" onClick={scrollToTodo}>\r\n              <div className=\"header-item\">{todoTasks.length}</div>\r\n              <span className=\"statistics-text\">Ongoing</span>\r\n            </div>\r\n          </div>\r\n          {/* <button className=\"header-item header-btn\">\r\n            <Link to=\"/add-task\">\r\n              <span>Add</span> <AiOutlinePlusCircle />\r\n            </Link>\r\n          </button> */}\r\n        </div>\r\n      </header>\r\n\r\n      <main>\r\n        <div className=\"home container1140\">\r\n          <div id=\"todoTasks\">\r\n            <h2>Ongoing tasks: </h2>\r\n            {todoTasks.length > 0 ? (\r\n              todoTasks.map((task) => (\r\n                <Task\r\n                  key={task.id}\r\n                  task={task}\r\n                  toastSuccess={toastSuccess}\r\n                  toastWarning={toastWarning}\r\n                />\r\n              ))\r\n            ) : (\r\n              <span className=\"noTasks\">No tasks yet</span>\r\n            )}\r\n          </div>\r\n          <div id=\"doneTasks\">\r\n            <h2>Completed tasks: </h2>\r\n            {doneTasks.length > 0 ? (\r\n              doneTasks.map((task) => (\r\n                <Task\r\n                  key={task.id}\r\n                  task={task}\r\n                  toastSuccess={toastSuccess}\r\n                  toastWarning={toastWarning}\r\n                />\r\n              ))\r\n            ) : (\r\n              <span className=\"noTasks\">No tasks yet</span>\r\n            )}\r\n          </div>\r\n        </div>\r\n      </main>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default Home;\r\n","import React from \"react\";\r\nimport { Modal } from \"antd\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport {\r\n  ModalVisibleAction,\r\n  ModalLoadingAction,\r\n  DeleteTaskAction,\r\n} from \"../redux/actions/ActionCreator\";\r\nimport { updateAllTasks } from \"../services/TaskServices\";\r\n\r\nconst ModalMain = ({ currentUser, toastSuccess }) => {\r\n  const dispatch = useDispatch();\r\n  const modalId = useSelector((state) => state.modalState.modalId);\r\n  const modalContent = useSelector((state) => state.modalState.modalContent);\r\n  const confirmLoading = useSelector((state) => state.modalState.isLoading);\r\n  const visible = useSelector((state) => state.modalState.isVisible);\r\n\r\n  const handleCancel = () => {\r\n    dispatch(ModalVisibleAction(false));\r\n  };\r\n\r\n  const deleteTaskThunk = () => {\r\n    return function (dispatch) {\r\n      dispatch(ModalLoadingAction(true));\r\n      const newTasks = currentUser.tasks.filter(\r\n        (eachTask) => eachTask.id !== modalId\r\n      );\r\n      const headers = {\r\n        Authorization: `Bearer ${currentUser.token}`,\r\n      };\r\n      updateAllTasks(currentUser.id, newTasks ? newTasks : [], {\r\n        headers,\r\n      }).then((res) => {\r\n        dispatch(DeleteTaskAction(res.data.tasks));\r\n        dispatch(ModalLoadingAction(false));\r\n        dispatch(ModalVisibleAction(false));\r\n        toastSuccess(\"Task is deleted successfully\");\r\n      });\r\n    };\r\n  };\r\n  const handleOk = () => {\r\n    dispatch(deleteTaskThunk());\r\n  };\r\n\r\n  return (\r\n    <Modal\r\n      // title=\"Confirmation\"\r\n      visible={visible}\r\n      confirmLoading={confirmLoading}\r\n      onOk={handleOk}\r\n      onCancel={handleCancel}\r\n    >\r\n      <p className=\"modalContent\">{modalContent}</p>\r\n    </Modal>\r\n  );\r\n};\r\n\r\nexport default ModalMain;\r\n","import React, { useState } from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport DatePicker from \"react-datepicker\";\r\nimport \"react-datepicker/dist/react-datepicker.css\";\r\nimport { subDays } from \"date-fns\";\r\nimport {\r\n  AddTaskAction,\r\n  ToggleLoadingAction,\r\n} from \"../redux/actions/ActionCreator\";\r\nimport { updateAllTasks } from \"../services/TaskServices\";\r\nimport { v4 as uuidv4 } from \"uuid\";\r\n// import { registerLocale, setDefaultLocale } from \"react-datepicker\";\r\n// import vi from \"date-fns/locale/vi\";\r\n// registerLocale(\"vi\", vi);\r\n\r\n//add task: POST task to API .then update store\r\nconst AddTask = ({ toastSuccess, toastError }) => {\r\n  const [taskName, setTaskName] = useState(\"\");\r\n  const [taskDate, setTaskDate] = useState(null);\r\n  const dispatch = useDispatch();\r\n  const currentUser = useSelector((store) => store.appState.currentUser);\r\n  const handleNameChange = (e) => {\r\n    setTaskName(e.target.value);\r\n  };\r\n\r\n  const handleDateChange = (date) => {\r\n    setTaskDate(date);\r\n  };\r\n\r\n  const addTaskThunk = () => {\r\n    return function (dispatch) {\r\n      dispatch(ToggleLoadingAction(true));\r\n      const newTask = {\r\n        id: uuidv4(),\r\n        taskName,\r\n        taskDate,\r\n        isDone: false,\r\n      };\r\n      const newTasks = [...currentUser.tasks, newTask];\r\n      const headers = {\r\n        Authorization: `Bearer ${currentUser.token}`,\r\n      };\r\n      updateAllTasks(currentUser.id, newTasks, { headers }).then(() => {\r\n        dispatch(\r\n          AddTaskAction({\r\n            ...newTask,\r\n            taskDate: new Date(taskDate).toISOString(),\r\n          })\r\n        );\r\n        dispatch(ToggleLoadingAction(false));\r\n        setTaskName(\"\");\r\n        setTaskDate(null);\r\n        toastSuccess(\"Task added successfully\");\r\n        console.log(currentUser);\r\n      });\r\n    };\r\n  };\r\n\r\n  const handleSubmit = () => {\r\n    if (taskName !== \"\" && taskDate !== null) dispatch(addTaskThunk());\r\n    else toastError(\"Please fill in both fields\");\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <header className=\"container1140\">\r\n        <h1>Add task</h1>\r\n        <div className=\"header-content\">\r\n          <button className=\"header-item header-btn\">\r\n            <Link to=\"/\">\r\n              <span>Back</span>\r\n            </Link>\r\n          </button>\r\n        </div>\r\n      </header>\r\n\r\n      <main>\r\n        <div className=\"container1140\">\r\n          <div className=\"form-item\">\r\n            <label htmlFor=\"taskName\">Add task:</label>\r\n            <input\r\n              type=\"text\"\r\n              id=\"taskName\"\r\n              value={taskName}\r\n              onChange={handleNameChange}\r\n            ></input>\r\n          </div>\r\n          <div className=\"form-item\">\r\n            <label htmlFor=\"taskDate\">Task date:</label>\r\n            <DatePicker\r\n              dateFormat=\"dd/MM/yyyy\"\r\n              selected={taskDate}\r\n              onChange={handleDateChange}\r\n              minDate={subDays(new Date(), 0)}\r\n            />\r\n          </div>\r\n          <button\r\n            onClick={handleSubmit}\r\n            className=\"confirm-btn blue-text-btn btn\"\r\n          >\r\n            Confirm\r\n          </button>\r\n        </div>\r\n      </main>\r\n    </>\r\n  );\r\n\r\n  //legacy (non-redux):\r\n  // const handleSubmitOld = () => {\r\n  //   if (taskName && taskDate) {\r\n  //     const newTask = { taskName, taskDate, isDone: false };\r\n  //     toggleLoading(true);\r\n  //     axios\r\n  //       .post(\"https://test-heroku444.herokuapp.com/tasks\", newTask)\r\n  //       .then((res) => {\r\n  //         setTaskName(\"\");\r\n  //         setTaskDate(\"\");\r\n  //         toggleLoading(false);\r\n  //         history.push(\"/\");\r\n  //       });\r\n  //   } else {\r\n  //     console.log(\"empty\");\r\n  //   }\r\n  // };\r\n};\r\n\r\nexport default AddTask;\r\n","export default __webpack_public_path__ + \"static/media/react-logo-min.90175bd1.png\";","import React from \"react\";\r\nimport logo from \"../assets/react-logo-min.png\";\r\n\r\nconst Loading = ({ isLoading }) => {\r\n  return (\r\n    <div className={`loading ${isLoading ? \"show\" : \"\"}`}>\r\n      <img src={logo} alt=\"loading\"></img>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Loading;\r\n","import React, { useEffect, useState } from \"react\";\r\nimport { Link, useParams } from \"react-router-dom\";\r\nimport { useDispatch } from \"react-redux\";\r\nimport DatePicker from \"react-datepicker\";\r\nimport \"react-datepicker/dist/react-datepicker.css\";\r\nimport { subDays, parseISO } from \"date-fns\";\r\nimport {\r\n  EditTaskAction,\r\n  ToggleLoadingAction,\r\n} from \"../redux/actions/ActionCreator\";\r\nimport { updateAllTasks } from \"../services/TaskServices\";\r\n// import { registerLocale, setDefaultLocale } from \"react-datepicker\";\r\n// import vi from \"date-fns/locale/vi\";\r\n// registerLocale(\"vi\", vi);\r\n\r\nconst EditTask = ({ currentUser, toastSuccess, toastError }) => {\r\n  const dispatch = useDispatch();\r\n  const { id } = useParams();\r\n\r\n  const [taskName, setTaskName] = useState(\"\");\r\n  const [taskDate, setTaskDate] = useState(null);\r\n  const [taskIsDone, setTaskIsDone] = useState(false);\r\n\r\n  useEffect(() => {\r\n    const currentTask = currentUser.tasks.find((task) => task.id === id);\r\n    if (currentTask) {\r\n      setTaskName(currentTask.taskName);\r\n      setTaskDate(parseISO(currentTask.taskDate));\r\n      setTaskIsDone(currentTask.isDone);\r\n    }\r\n  }, [currentUser]);\r\n\r\n  const handleNameChange = (e) => {\r\n    setTaskName(e.target.value);\r\n  };\r\n\r\n  const handleDateChange = (date) => {\r\n    setTaskDate(date);\r\n  };\r\n\r\n  const editTaskThunk = () => {\r\n    return function (dispatch) {\r\n      dispatch(ToggleLoadingAction(true));\r\n      const editedTask = {\r\n        id: id,\r\n        taskName,\r\n        taskDate: new Date(taskDate).toISOString(),\r\n        isDone: taskIsDone,\r\n      };\r\n      const newTasks = currentUser.tasks.map((task) => {\r\n        return task.id == id ? editedTask : task;\r\n      });\r\n      console.log(newTasks);\r\n      const headers = {\r\n        Authorization: `Bearer ${currentUser.token}`,\r\n      };\r\n      updateAllTasks(currentUser.id, newTasks, { headers }).then(() => {\r\n        dispatch(EditTaskAction(id, editedTask));\r\n        dispatch(ToggleLoadingAction(false));\r\n        toastSuccess(\"Task edited successfully\");\r\n      });\r\n    };\r\n  };\r\n\r\n  const handleSubmit = () => {\r\n    if (taskName !== \"\" && taskDate !== null) dispatch(editTaskThunk());\r\n    else toastError(\"Please fill in both fields\");\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <header className=\"container1140\">\r\n        <h1>Edit task</h1>\r\n        <div className=\"header-content\">\r\n          <button className=\"header-item header-btn\">\r\n            <Link to=\"/\">\r\n              <span>Back</span>\r\n            </Link>\r\n          </button>\r\n        </div>\r\n      </header>\r\n\r\n      <main>\r\n        <div className=\"container1140\">\r\n          <div className=\"form-item\">\r\n            <label htmlFor=\"taskName\">Edit task:</label>\r\n            <input\r\n              type=\"text\"\r\n              id=\"taskName\"\r\n              value={taskName}\r\n              onChange={handleNameChange}\r\n            ></input>\r\n          </div>\r\n          <div className=\"form-item\">\r\n            <label htmlFor=\"taskDate\">Task date:</label>\r\n            <DatePicker\r\n              dateFormat=\"dd/MM/yyyy\"\r\n              selected={taskDate}\r\n              onChange={handleDateChange}\r\n              minDate={subDays(new Date(), 0)}\r\n            />\r\n          </div>\r\n          <button\r\n            onClick={handleSubmit}\r\n            className=\"confirm-btn blue-text-btn btn\"\r\n          >\r\n            Confirm\r\n          </button>\r\n        </div>\r\n      </main>\r\n    </>\r\n  );\r\n};\r\n\r\n//legacy: non-redux\r\n\r\n// const handleSubmit = () => {\r\n//   if (taskName && taskDate) {\r\n//     const editedTask = { taskName, taskDate };\r\n//     toggleLoading(true);\r\n//     axios\r\n//       .patch(`https://test-heroku444.herokuapp.com/tasks/${id}`, editedTask)\r\n//       .then((res) => {\r\n//         console.log(res);\r\n//         setTaskName(\"\");\r\n//         setTaskDate(\"\");\r\n//         reRender();\r\n//         toggleLoading(false);\r\n//         history.push(\"/\");\r\n//       });\r\n//   } else {\r\n//     console.log(\"empty\");\r\n//   }\r\n// };\r\n\r\nexport default EditTask;\r\n","import axios from \"axios\";\r\nimport { api } from \"./API_URL\";\r\n\r\n//GET request to /users/id to fetch data of user/id\r\nexport const GetUserByIdAPI = (id, headers) => {\r\n  return axios.get(api + \"/users/\" + id, {headers});\r\n};\r\n\r\n//GET request to /currentUser to fetch data\r\nexport const GetCurrentUserAPI = () => {\r\n  return axios.get(api + \"/currentUser\");\r\n};\r\n\r\n//PUT request to /currentUser to: update data when log in or update back to {} when log out\r\nexport const UpdateCurrentUserAPI = (payload) => {\r\n  return axios.put(api + \"/currentUser\", payload);\r\n};\r\n\r\n//POST request to /login or /register with payload\r\nexport const LogSignAPI = (apiUrl, endpoint, payload) => {\r\n  return axios.post(apiUrl + endpoint, payload);\r\n};\r\n","import React, { useState } from \"react\";\r\nimport { useHistory } from \"react-router-dom\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { UpdateCurrentUserAPI, LogSignAPI } from \"../services/UserServices\";\r\nimport {\r\n  UpdateCurrentUserAction,\r\n  ToggleLoadingAction,\r\n} from \"../redux/actions/ActionCreator\";\r\n\r\nconst LoginPage = ({ toastSuccess, toastError }) => {\r\n  const history = useHistory();\r\n  const initDispatch = useDispatch();\r\n  const apiUrl = useSelector((store) => store.appState.apiUrl);\r\n\r\n  const [mode, setMode] = useState(\"Login\");\r\n  const [username, setUsername] = useState(\"\");\r\n  const [password, setPassword] = useState(\"\");\r\n  const [isClose, setIsClose] = useState(false);\r\n\r\n  const handleUsernameChange = (e) => {\r\n    setUsername(e.target.value);\r\n  };\r\n\r\n  const handlePasswordChange = (e) => {\r\n    setPassword(e.target.value);\r\n  };\r\n\r\n  const switchMode = () => {\r\n    mode === \"Login\" ? setMode(\"Signup\") : setMode(\"Login\");\r\n  };\r\n\r\n  //log-sign\r\n  const LogSignThunk = (endpoint) => {\r\n    initDispatch(ToggleLoadingAction(true));\r\n    const userInput = { username, password };\r\n    return function (dispatch) {\r\n      return (\r\n        LogSignAPI(apiUrl, endpoint, userInput)\r\n          .then((res) => {\r\n            dispatch(UpdateCurrentUserAction(res.data));\r\n            UpdateCurrentUserAPI({ id: res.data.id, token: res.data.token });\r\n            setIsClose(true);\r\n            toastSuccess(`Welcome, ${res.data.username}. Redirecting...`, {\r\n              onClose: () => history.push(\"/\"),\r\n            });\r\n          })\r\n          // .then((res) => {\r\n          //   return UpdateCurrentUserAPI;\r\n          // })\r\n          .catch((error) => {\r\n            toastError(error.response.data.message);\r\n          })\r\n          .finally(() => {\r\n            initDispatch(ToggleLoadingAction(false));\r\n          })\r\n      );\r\n    };\r\n  };\r\n  const handleLogSign = (endpoint) => {\r\n    isClose ? console.log(\"blocked\") : initDispatch(LogSignThunk(endpoint));\r\n  };\r\n\r\n  //submit\r\n  const handleSubmit = () => {\r\n    mode === \"Login\" ? handleLogSign(\"/login\") : handleLogSign(\"/register\");\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <header className=\"container1140\">\r\n        <h1>Task Manager by React</h1>\r\n        <h2>{mode === \"Login\" ? \"Log in\" : \"Sign up\"}</h2>\r\n      </header>\r\n\r\n      <main className=\"login-page-wrapper\">\r\n        <div className=\"login-page container1140\">\r\n          <div className=\"form-item\">\r\n            <label htmlFor=\"username\">Username:</label>\r\n            <input\r\n              type=\"text\"\r\n              id=\"username\"\r\n              placeholder=\"demo: user\"\r\n              onChange={handleUsernameChange}\r\n            ></input>\r\n          </div>\r\n          <div className=\"form-item\">\r\n            <label htmlFor=\"password\">Password:</label>\r\n            <input\r\n              type=\"text\"\r\n              id=\"password\"\r\n              placeholder=\"demo: 123\"\r\n              onChange={handlePasswordChange}\r\n            ></input>\r\n          </div>\r\n          <button\r\n            onClick={handleSubmit}\r\n            className=\"confirm-btn blue-text-btn btn\"\r\n          >\r\n            {mode === \"Login\" ? \"Log in\" : \"Sign up\"}\r\n          </button>\r\n\r\n          <p className=\"sign-up-text\">\r\n            {mode === \"Login\"\r\n              ? \"Don't have an account yet?\"\r\n              : \"Have an account?\"}\r\n            <span className=\"sign-up\" onClick={switchMode}>\r\n              {mode === \"Login\" ? \" Sign up here!\" : \" Log in now!\"}\r\n            </span>\r\n          </p>\r\n\r\n          <div className=\"projects\">\r\n            <h3>My other projects:</h3>\r\n            <ul>\r\n              <li>\r\n                <a\r\n                  href=\"https://ducnt444.github.io/halo\"\r\n                  target=\"_blank\"\r\n                  rel=\"noreferrer\"\r\n                >\r\n                  HALO\r\n                </a>\r\n                : demo camera shop website (static content, practicing Pug, CSS,\r\n                JS)\r\n              </li>\r\n              <li>\r\n                <a\r\n                  href=\"https://ducnt444.github.io/planetary\"\r\n                  target=\"_blank\"\r\n                  rel=\"noreferrer\"\r\n                >\r\n                  PLANETARY\r\n                </a>\r\n                : demo space travel website (practicing Vue.js, Vuex)\r\n              </li>\r\n              <li>\r\n                <a\r\n                  href=\"https://changeable-list.herokuapp.com/\"\r\n                  target=\"_blank\"\r\n                  rel=\"noreferrer\"\r\n                >\r\n                  Changeable list\r\n                </a>\r\n                : demo list manager (practicing DOM manipulation, Jquery, basic\r\n                uses of REST API)\r\n              </li>\r\n            </ul>\r\n          </div>\r\n        </div>\r\n      </main>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default LoginPage;\r\n","import React from \"react\";\r\nimport { NavLink } from \"react-router-dom\";\r\nimport { AiOutlinePlusCircle } from \"react-icons/ai\";\r\nimport { BiHomeAlt, BiUser } from \"react-icons/bi\";\r\n\r\nconst TheNavigation = () => {\r\n  return (\r\n    <nav>\r\n      <ul className=\"container1140\">\r\n        <li>\r\n          <NavLink\r\n            to=\"/\"\r\n            exact={true}\r\n            className=\"flex-center\"\r\n            activeClassName=\"active-tab\"\r\n          >\r\n            <span className=\"desktop\">Home</span> <BiHomeAlt />\r\n          </NavLink>\r\n        </li>\r\n        <li>\r\n          <NavLink\r\n            to=\"/add-task\"\r\n            className=\"flex-center\"\r\n            activeClassName=\"active-tab\"\r\n          >\r\n            <span className=\"desktop\">\r\n              Add <AiOutlinePlusCircle />\r\n            </span>\r\n            <AiOutlinePlusCircle />\r\n          </NavLink>\r\n        </li>\r\n        <li>\r\n          <NavLink\r\n            to=\"/profile\"\r\n            className=\"flex-center\"\r\n            activeClassName=\"active-tab\"\r\n          >\r\n            <span className=\"desktop\">profile</span> <BiUser />\r\n          </NavLink>\r\n        </li>\r\n      </ul>\r\n    </nav>\r\n  );\r\n};\r\n\r\nexport default TheNavigation;\r\n","import { UpdateCurrentUserAPI } from \"../services/UserServices\";\r\nimport { useHistory } from \"react-router-dom\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { BiUser } from \"react-icons/bi\";\r\nimport {\r\n  ToggleLoadingAction,\r\n  UpdateCurrentUserAction,\r\n} from \"../redux/actions/ActionCreator\";\r\nimport axios from \"axios\";\r\n\r\nconst Profile = () => {\r\n  const apiUrl = useSelector((store) => store.appState.apiUrl);\r\n  const currentUser = useSelector((store) => store.appState.currentUser);\r\n  const history = useHistory();\r\n  const initDispatch = useDispatch();\r\n\r\n  const logoutThunk = () => {\r\n    initDispatch(ToggleLoadingAction(true));\r\n    return async function (dispatch) {\r\n      const { data } = await UpdateCurrentUserAPI({ id: \"\", token: \"\" });\r\n      dispatch(UpdateCurrentUserAction(data));\r\n      history.push(\"/login\");\r\n      initDispatch(ToggleLoadingAction(false));\r\n    };\r\n  };\r\n\r\n  const handleLogout = () => {\r\n    initDispatch(logoutThunk());\r\n  };\r\n\r\n  const handleTest = () => {\r\n    const headers = {\r\n      Authorization: `Bearer ${currentUser.token}`,\r\n    };\r\n    axios.get(apiUrl + \"/users/\", { headers }).then((res) => console.log(res));\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <header className=\"container1140\">\r\n        <h1>Profile</h1>\r\n        <div className=\"userInfo\">\r\n          <div className=\"userAvatar flex-center\">\r\n            <BiUser />\r\n          </div>\r\n          <h3 className=\"userName\">{currentUser.username}</h3>\r\n        </div>\r\n      </header>\r\n\r\n      <main className=\"flex-center\">\r\n        <div className=\"container1140 flex-center\">\r\n          <button className=\"logoutBtn\" onClick={handleLogout}>\r\n            Logout\r\n          </button>\r\n          {/* <button onClick={handleTest}>Test</button> */}\r\n        </div>\r\n      </main>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default Profile;\r\n","import \"./App.css\";\nimport Home from \"./views/Home/Home\";\nimport { useEffect } from \"react\";\nimport { Route, Switch, useHistory } from \"react-router-dom\";\nimport ModalMain from \"./components/ModalMain\";\nimport AddTask from \"./views/AddTask\";\nimport Loading from \"./components/Loading\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport EditTask from \"./views/EditTask\";\nimport {\n  DisplayNavAction,\n  ToggleLoadingAction,\n  UpdateCurrentUserAction,\n} from \"./redux/actions/ActionCreator\";\nimport { ToastContainer, toast, Flip } from \"react-toastify\";\nimport \"react-toastify/dist/ReactToastify.css\";\nimport LoginPage from \"./views/LoginPage\";\nimport TheNavigation from \"./components/TheNavigation\";\nimport Profile from \"./views/Profile\";\nimport { GetCurrentUserAPI, GetUserByIdAPI } from \"./services/UserServices\";\n\nfunction App() {\n  //toast\n  const toastSuccess = (text, callback) => toast.success(text, callback);\n  const toastError = (text) => toast.error(text);\n  const toastWarning = (text) => toast.warn(text);\n\n  //general\n  const history = useHistory();\n  const dispatch = useDispatch();\n\n  //toggleLoading\n  const isLoading = useSelector((store) => store.loadingState.isLoading);\n\n  const currentUser = useSelector((store) => store.appState.currentUser);\n\n  // const getCurrent = async () => {\n  //   const { data } = await GetCurrentUserAPI();\n  //   if (data.token !== \"\") {\n  //     dispatch(UpdateCurrentTokenAction(data.token));\n  //     const headers = {\n  //       Authorization: `Bearer ${data.token}`,\n  //     };\n  //     const currentUserData = await GetUserByIdAPI(data.id, headers);\n  //     dispatch(UpdateCurrentUserAction(currentUserData.data));\n  //   } else {\n  //     history.push(\"/login\");\n  //   }\n  //   dispatch(ToggleLoadingAction(false));\n  // };\n\n  //thunk\n  const getCurrent = () => {\n    return function (dispatch) {\n      return GetCurrentUserAPI()\n        .then((res) => {\n          const token = res.data.token;\n          if (token !== \"\") {\n            const headers = {\n              Authorization: `Bearer ${token}`,\n            };\n            GetUserByIdAPI(res.data.id, headers)\n              .then((res2) => {\n                dispatch(UpdateCurrentUserAction({ ...res2.data, token }));\n              })\n              .catch((err) => {\n                if (err.response.data === \"Unauthorized\")\n                  history.push(\"/login\");\n              })\n              .finally(() => {\n                dispatch(ToggleLoadingAction(false));\n              });\n          } else {\n            history.push(\"/login\");\n          }\n        })\n        .finally(() => {\n          dispatch(ToggleLoadingAction(false));\n        });\n    };\n  };\n\n  //first load: get currentUserID from API, then call thunk: get current user data from API then update state\n  useEffect(() => {\n    dispatch(getCurrent());\n  }, []);\n\n  return (\n    <div className=\"App\">\n      <Loading isLoading={isLoading} />\n      <ToastContainer\n        transition={Flip}\n        className=\"customizedToast\"\n        position=\"bottom-right\"\n        autoClose={2000}\n        hideProgressBar={false}\n        newestOnTop\n        closeOnClick={false}\n        rtl={false}\n        pauseOnFocusLoss={false}\n        draggable={false}\n        pauseOnHover={false}\n      />\n      <ModalMain currentUser={currentUser} toastSuccess={toastSuccess} />\n      <Switch>\n        <Route path=\"/login\">\n          <LoginPage toastSuccess={toastSuccess} toastError={toastError} />\n        </Route>\n        <Route path=\"/profile\">\n          <Profile />\n        </Route>\n        <Route path=\"/add-task\">\n          <AddTask toastSuccess={toastSuccess} toastError={toastError} />\n        </Route>\n        <Route path=\"/edit-task/:id\">\n          <EditTask\n            currentUser={currentUser}\n            toastSuccess={toastSuccess}\n            toastError={toastError}\n          />\n        </Route>\n        <Route path=\"/\" exact={true}>\n          <Home toastSuccess={toastSuccess} toastWarning={toastWarning} />\n        </Route>\n      </Switch>\n      <TheNavigation />\n    </div>\n  );\n}\n\n//legacy\n\n//Component state style\n// const [tasks, setTasks] = useState([]);\n// useEffect(() => {\n//   axios.get(\"https://test-heroku444.herokuapp.com/tasks\").then((res) => {\n//     setTasks(res.data);\n//     toggleLoading(false);\n//   });\n// }, [toggleFetching]);\n\n//Modal\n// modalContent = { modalContent };\n// visible = { visible };\n// confirmLoading = { confirmLoading };\n// confirmDelete = { confirmDelete };\n// handleCancel = { confirmCancel };\n// const confirmLoading = useSelector((state) => state.modalState.isLoading);\n// const visible = useSelector((state) => state.modalState.isVisible);\n// const modalContent = useSelector((state) => state.modalState.modalContent);\n\n// //delete task\n// const [deleteID, setDeleteID] = useState(\"\");\n// const handleDelete = (id) => {\n//   setModalContent(\"Do you want to delete this task?\");\n//   setVisible(true);\n//   setDeleteID(id);\n// };\n// const confirmCancel = () => {\n//   setVisible(false);\n// };\n// const confirmDelete = () => {\n//   setConfirmLoading(true);\n//   axios\n//     .delete(`https://test-heroku444.herokuapp.com/tasks/${deleteID}`)\n//     .then(() => {\n//       // setTasks(tasks.filter((task) => task.id !== deleteID));\n//       setConfirmLoading(false);\n//       setVisible(false);\n//     });\n// };\n\n//complete task\n// const handleComplete = (isDone, id) => {\n//   toggleLoading(true);\n//   axios\n//     .patch(`https://test-heroku444.herokuapp.com/tasks/${id}`, {\n//       isDone: !isDone,\n//     })\n//     .then(() => {\n//       setToggleFetching((toggleFetching) => toggleFetching + 1);\n//       toggleLoading(false);\n//     });\n// };\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import { GetTaskListType, AddTaskType } from \"../actions/ActionType\";\r\nimport { createReducer } from \"@reduxjs/toolkit\";\r\nimport {\r\n  EditTaskAction,\r\n  DeleteTaskAction,\r\n  CompleteTaskAction,\r\n  GetTaskListAction2,\r\n} from \"../actions/ActionCreator\";\r\n\r\nexport const TaskReducer = createReducer(\r\n  { taskList: [], deleteID: null },\r\n  (builder) => {\r\n    builder\r\n      .addCase(GetTaskListType, (state, action) => {\r\n        state.taskList = action.payload.taskList;\r\n      })\r\n      .addCase(AddTaskType, (state, action) => {\r\n        state.taskList.push(action.payload.newTask);\r\n      })\r\n      .addCase(EditTaskAction, (state, action) => {\r\n        state.taskList = state.taskList.map((task) =>\r\n          task.id === action.payload.editedTask.id\r\n            ? {\r\n                ...task,\r\n                taskName: action.payload.editedTask.taskName,\r\n                taskDate: action.payload.editedTask.taskDate,\r\n                isDone: action.payload.editedTask.isDone,\r\n              }\r\n            : task\r\n        );\r\n      })\r\n      .addCase(CompleteTaskAction, (state, action) => {\r\n        state.taskList = state.taskList.map((task) =>\r\n          task.id === action.payload.completeTask.id\r\n            ? {\r\n                ...task,\r\n                isDone: action.payload.completeTask.isDone,\r\n              }\r\n            : task\r\n        );\r\n      })\r\n      .addCase(DeleteTaskAction, (state, action) => {\r\n        if (action.payload.mode === \"attemptDelete\") {\r\n          state.deleteID = action.payload.deleteId;\r\n        } else if (action.payload.mode === \"confirmDelete\") {\r\n          state.taskList = state.taskList.filter(\r\n            (task) => task.id !== state.deleteID\r\n          );\r\n        }\r\n      })\r\n      .addCase(GetTaskListAction2, (state, action) => {\r\n        state.taskList = action.payload.taskList;\r\n      });\r\n  }\r\n);\r\n\r\n//legacy: old style\r\n// export const TaskReducer = (\r\n// state = {\r\n//   taskList: [],\r\n// },\r\n//   action\r\n// ) => {\r\n//   switch (action.type) {\r\n//     case GetTaskListType: {\r\n//       return { ...state, taskList: action.payload.taskList };\r\n//     }\r\n//     default:\r\n//       return state;\r\n//   }\r\n// };\r\n","import { createReducer } from \"@reduxjs/toolkit\";\r\nimport {\r\n  ModalContentAction,\r\n  ModalVisibleAction,\r\n  ModalLoadingAction,\r\n} from \"../actions/ActionCreator\";\r\n\r\nexport const ModalReducer = createReducer(\r\n  { modalContent: \"\", modalId: null, isVisible: false, isLoading: false },\r\n  (builder) => {\r\n    builder\r\n      .addCase(ModalContentAction, (state, action) => {\r\n        state.modalId = action.payload.id;\r\n        state.modalContent = action.payload.content;\r\n      })\r\n      .addCase(ModalVisibleAction, (state, action) => {\r\n        state.isVisible = action.payload.isVisible;\r\n      })\r\n      .addCase(ModalLoadingAction, (state, action) => {\r\n        state.isLoading = action.payload.isLoading;\r\n      });\r\n  }\r\n);\r\n","import {\r\n  UpdateCurrentUserAction,\r\n  LogoutAction,\r\n  AddTaskAction,\r\n  EditTaskAction,\r\n  DeleteTaskAction,\r\n} from \"../actions/ActionCreator\";\r\nimport { createReducer } from \"@reduxjs/toolkit\";\r\n\r\nexport const UserReducer = createReducer(\r\n  {\r\n    apiUrl: \"https://rest-api-v2.herokuapp.com\",\r\n    currentUser: {\r\n      id: null,\r\n      username: \"\",\r\n      token: \"\",\r\n      tasks: [],\r\n    },\r\n  },\r\n  (builder) => {\r\n    builder\r\n      .addCase(UpdateCurrentUserAction, (state, action) => {\r\n        state.currentUser = action.payload.userInput;\r\n      })\r\n      .addCase(LogoutAction, (state) => {\r\n        state.currentUser = {\r\n          id: null,\r\n          username: \"\",\r\n          token: \"\",\r\n          tasks: [],\r\n        };\r\n      })\r\n      .addCase(AddTaskAction, (state, action) => {\r\n        state.currentUser.tasks.push(action.payload.newTask);\r\n      })\r\n      .addCase(EditTaskAction, (state, action) => {\r\n        state.currentUser.tasks = state.currentUser.tasks.map((task) => {\r\n          return task.id == action.payload.id\r\n            ? action.payload.editedTask\r\n            : task;\r\n        });\r\n      })\r\n      .addCase(DeleteTaskAction, (state, action) => {\r\n        state.currentUser.tasks = action.payload;\r\n      });\r\n  }\r\n);\r\n","import { createReducer } from \"@reduxjs/toolkit\";\r\nimport { DisplayNavAction } from \"../actions/ActionCreator\";\r\n\r\nexport const NavigationReducer = createReducer(\r\n  { displayNav: true },\r\n  (builder) => {\r\n    builder.addCase(DisplayNavAction, (state, action) => {\r\n      state.displayNav = action.payload;\r\n    });\r\n  }\r\n);\r\n","import { combineReducers } from \"redux\";\r\nimport { LoadingReducer } from \"./LoadingReducer\";\r\nimport { TaskReducer } from \"./TaskReducer\";\r\nimport { ModalReducer } from \"./ModalReducer\";\r\nimport { UserReducer } from \"./UserReducer\";\r\nimport { NavigationReducer } from \"./NavigationReducer\";\r\n\r\nexport default combineReducers({\r\n  appState: UserReducer,\r\n  loadingState: LoadingReducer,\r\n  taskState: TaskReducer,\r\n  modalState: ModalReducer,\r\n  navState: NavigationReducer,\r\n});\r\n","import { ToggleLoadingType } from \"../actions/ActionType\";\r\n\r\nexport const LoadingReducer = (\r\n  state = {\r\n    isLoading: true,\r\n  },\r\n  action\r\n) => {\r\n  switch (action.type) {\r\n    case ToggleLoadingType: {\r\n      return { ...state, isLoading: action.payload.status };\r\n    }\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n","import rootReducer from \"./reducers/RootReducer\";\r\nimport { createStore, applyMiddleware } from \"redux\";\r\nimport { composeWithDevTools } from \"redux-devtools-extension\";\r\nimport thunk from \"redux-thunk\";\r\n\r\nconst middleware = [thunk];\r\n\r\nconst store = createStore(\r\n  rootReducer,\r\n  composeWithDevTools(\r\n    applyMiddleware(...middleware)\r\n  )\r\n);\r\n\r\nexport default store;\r\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { Provider } from \"react-redux\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\nimport { HashRouter } from \"react-router-dom\";\nimport store from \"./redux/Store\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <HashRouter>\n      <Provider store={store}>\n        <App />\n      </Provider>\n    </HashRouter>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}